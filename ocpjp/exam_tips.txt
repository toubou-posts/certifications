CHAPTER 1 Java class design

Calls to the overloaded methods are resolved during compilation.

For primitive method arguments, if a call to an overloaded method is dubious, the code won't compile.

When the Java compiler differentiates methods, it doesn't consider their return types. So you can't define overloaded methods with the same parameter list and different return types.

When the Java compiler differentiates methods, it doesn't consider their return types. So you can't define overloaded methods with the same parameter list and different return types.

overloaded constructors are invoked by using the keyword this

when you invoke an overloaded constructor using the keyword this, it must be the first statement in your constructor

If a parent or child class defines static initializer block(s), they execute before all parent and child class constructors and instance initializers—first for the parent and then for the child class.

An overriding method can throw any unchecked exception (RuntimeException or Error) even if the overridden method doesn’t. The unchecked exceptions aren't part of the method signature and aren’t checked by the compiler.

It’s the reference variable type that dictates which overloaded method will be chosen. This choice is made at compilation time.

When a class extends another class, it can overload, override, or hide its base class methods. A class can’t override or hide its own methods—it can only overload its own methods.

Constructors can’t be overridden because a base class constructor isn’t inherited by a derived class.

Use Object as the parameter type to equals(). Using any other type will overload equals().

An inappropriately overridden method equals() doesn’t mean compilation failure.

In the absence of explicit casting, you’ll never get ClassCast-Exception—a RuntimeException. (explanation: At runtime, Java can determine the exact type of the object being casted. It throws a ClassCastException if you’re trying to cast types that aren’t allowed.)

Class String is defined as a final class. Watch out for questions that explicitly cast String objects to interfaces they don’t implement. They won’t compile.

You can explicitly cast null to any type. It won’t generate a compilation error or throw a ClassCastException.

If you cast an instance to a class outside its inheritance tree, you’ll get a compiler error. If you cast an instance to a class within its inheritance tree, but the types don’t match at runtime, the code will throw a ClassCastException.

The operator instanceof returns false if the reference variable being compared to is null.

The instanceof operator never throws a runtime exception; it returns either true or false. If the instanceof operator uses inconvertible types, the code won’t compile.

The literal value null isn’t an instance of any class. So <referenceVariable> instanceof <ClassName> will return false whenever the <referenceVariable> is null.

Members of a named package can’t access classes and interfaces defined in the default package.

This feature is called static imports, but syntax is import static.
