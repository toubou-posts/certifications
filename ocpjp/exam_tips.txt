CHAPTER 1 Java class design

Calls to the overloaded methods are resolved during compilation.

For primitive method arguments, if a call to an overloaded method is dubious, the code won't compile.

When the Java compiler differentiates methods, it doesn't consider their return types. So you can't define overloaded methods with the same parameter list and different return types.

When the Java compiler differentiates methods, it doesn't consider their return types. So you can't define overloaded methods with the same parameter list and different return types.

overloaded constructors are invoked by using the keyword this

when you invoke an overloaded constructor using the keyword this, it must be the first statement in your constructor

If a parent or child class defines static initializer block(s), they execute before all parent and child class constructors and instance initializers—first for the parent and then for the child class.

An overriding method can throw any unchecked exception (RuntimeException or Error) even if the overridden method doesn’t. The unchecked exceptions aren't part of the method signature and aren’t checked by the compiler.

It’s the reference variable type that dictates which overloaded method will be chosen. This choice is made at compilation time.

When a class extends another class, it can overload, override, or hide its base class methods. A class can’t override or hide its own methods—it can only overload its own methods.

Constructors can’t be overridden because a base class constructor isn’t inherited by a derived class.
