CHAPTER 1 Java class design


A derived class can also overload the methods inherited from its base class.

The overloaded methods are bound at compile time and not runtime (that is, we only mind for the reference variable (emp, in our case): Employee emp = new CEO();  )
To resolve the call to the overloaded methods, the compiler considers the type of variable that’s used to refer to an object.

An int literal value can be passed to a variable of type double.

Rules to remember for defining overloaded constructors
■ Overloaded constructors must be defined using different argument lists.
■ Overloaded constructors can’t be defined by just a change in the access modifiers.
■ Overloaded constructors can be defined using different access modifiers.
■ A constructor can call another overloaded constructor by using the keyword this.
■ A constructor can’t invoke a constructor by using its class’s name.
■ If present, the call to another constructor must be the first statement in a
constructor.

Each instance initializer is invoked when an instance is created, in the order they’re defined in a class. They’re invoked before a class constructor is invoked.

Recursive constructor invocation isn’t allowed: A constructor can’t call itself. If a class defines two overloaded constructors, A and B, A can’t call itself. Also, if A calls B, B can’t call A because it would again result in a recursive constructor call.

The static methods of a base can’t be overridden, but they can be hidden by defining methods with the same signature in the derived class.

Virtual method invocation is the invocation of the correct overridden method, which is based on the type of the object referred to by an object reference and not by the object reference itself. It’s determined at runtime, not at compilation time.

A derived class can’t override a base class method marked final.

When the overriding method returns a subclass of the return type of the overridden method, it’s known as a covariant return type.

If a derived class defines a static method with the same name and signature as the one defined in its base class, it hides its base class method and doesn’t override it.You can’t override static methods.

The static methods are bound at compile time.

It’s important to override the nonfinal Object class methods (clone(), finalize(), toString(), equals(), hashCode() ) so that these classes can be used efficiently by other users.
