the Integer class is provided so that values can be boxed/unboxed in a pure OO manner. use int where appropriate unless you specifically need to use it in an OO way; in which case Integer is appropriate.

If we want a variable of a class not to be modified each time a class method is called, then we have to define it as static.
Otherwise (i.e. if we want a variable to be initialised each time a class method is called), we don't have to declare it as static

-----------------

Generic Types
The most commonly used type parameter names are:

E - Element (used extensively by the Java Collections Framework)
K - Key
N - Number
T - Type
V - Value
S,U,V etc. - 2nd, 3rd, 4th types

-------------------------

@EJB annotation

The @EJB annotation (and @Resource, @WebServiceRef, etc.) serves two purposes:

It declares a reference in the component namespace. For example, @EJB(name="myEJB") creates a reference java:comp/env/myEJB. If you annotate a field and do not specify a name, then it creates a reference java:comp/env/com.example.MyClass/myField.
If the annotation is declared on a field or setter method, then the container performs injection when the component is created.
How the reference is resolved varies, independent of whether the reference is being resolved for a lookup("java:comp/env/myEJB") or due to injection:

If EE 6+ is used, the lookup attribute requires a JNDI lookup to resolve the target.
Some application servers support mappedName, which is specified to be vendor specific. This is usually implemented by performing a lookup.
Application servers support bindings at deployment time. This is usually implemented by performing a lookup.
If no other binding information is provided and the bean interface (beanInterface or the field type) is only implemented by a single EJB in the application, then the EJB specification requires that it fall back to that.
If no other binding information is provided and #4 cannot work, some application servers will attempt to perform a lookup in the server namespace based on the ref name (for example, java:comp/env/myEJB might cause a lookup of myEJB in the server namespace).

Conversion between primitive and object representation is often handled by auto-boxing and unboxing
Autoboxing is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes. 
Converting an object of a wrapper type (Integer) to its corresponding primitive (int) value is called unboxing
----------------------
PERFORMANCE
In order to improve performance, rather than treating everything in Java as an object, we have primitive types (byte, short, int, long, double, float, char, boolean) to represent primitive values 

--------------------
ENHANCED IF CAN HAVE THE FORMAT OF IF->IF ELSE->ELSE
maxlength="#{not empty maxlength ? maxlength : not empty size ? size : '35'}"
Having two or more ":" means "else if", with the last statement to be always translated to "else"